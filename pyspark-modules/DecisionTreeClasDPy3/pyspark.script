from pyspark.ml import Pipeline
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from pyspark.ml.feature import StringIndexer, VectorIndexer, IndexToString,VectorAssembler
from pyspark.ml.classification import DecisionTreeClassifier
import json
##############################read data##################################
if "{{file_type}}" == "HDFS":
    modeldata = spark.read.csv("{{file_path}}", header=True, inferSchema=True)
elif "{{file_type}}" == "HIVE":
    modeldata = spark.table("{{file_path}}")
##############################prepare data###############################
assembler = VectorAssembler(inputCols=[{{featuresCol}}], outputCol="features")
modeldata = assembler.transform(modeldata)
(otherdata, testdata) = modeldata.randomSplit([(1 - {{testRate}}), {{testRate}}])
##############################prepare pipeline###########################
labelIndexer = StringIndexer(
    inputCol="{{labelCol}}", 
    outputCol="indexedLabel"
    ).fit(modeldata)
featureIndexer = VectorIndexer(
    inputCol="features", 
    outputCol="indexedFeatures", 
    maxCategories=4
    ).fit(modeldata)
dt = DecisionTreeClassifier(
    featuresCol="indexedFeatures",
    labelCol="indexedLabel",
    maxDepth={{maxDepth}},
    maxBins={{maxBins}},
    minInstancesPerNode={{minInstancesPerNode}},
    minInfoGain={{minInfoGain}},
    impurity="{{impurity}}",
    seed={{seed}}
    )
labelConverter = IndexToString(
    inputCol="prediction", 
    outputCol="predictionLabel", 
    labels=labelIndexer.labels
    )
st=[labelIndexer, featureIndexer, dt, labelConverter]
pipeline = Pipeline(stages=st)
##############################train model#############################
model = pipeline.fit(modeldata)
##############################test model##############################
prediction = model.transform(testdata)
##############################evaluate model##########################
evaluator = MulticlassClassificationEvaluator(
    labelCol="indexedLabel",
    predictionCol="prediction"
    )
f1 = evaluator.setMetricName("f1").evaluate(prediction)
weightedPrecision = evaluator.setMetricName("weightedPrecision").evaluate(prediction)
weightedRecall = evaluator.setMetricName("weightedRecall").evaluate(prediction)
accuracy = evaluator.setMetricName("accuracy").evaluate(prediction)
summary = {
    "ModelName":"DecisionTreeClassifier",
    "Metrics":{
        "f1":f1,
        "precision":weightedPrecision,
        "recall":weightedRecall,
        "accuracy":accuracy
    },
    "ModelPath":"{{model_path}}"
}
##############################save summary##########################
sc.parallelize([json.dumps(summary)]).saveAsTextFile("{{summary_path}}")
##############################save model############################
model.save("{{model_path}}")